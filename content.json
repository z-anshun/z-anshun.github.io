{"meta":{"title":"小川的博客","subtitle":"","description":"后端开发，前端学习ing","author":"小川","url":"https://github.com/z-anshun/z-anshun.github.io/tree/master","root":"/"},"pages":[{"title":"","date":"2020-10-07T15:52:46.169Z","updated":"2020-10-07T15:52:46.169Z","comments":true,"path":"js/load-aplayer.js","permalink":"https://github.com/z-anshun/z-anshun.github.io/tree/master/js/load-aplayer.js","excerpt":"","text":"document.addEventListener(\"DOMContentLoaded\", function() { let apContainer = document.createElement(\"div\"); apContainer.id = \"aplayer\"; document.body.append(apContainer); const ap = new APlayer({ container: document.getElementById(\"aplayer\"), fixed: true, audio: [ { name: \"name\", artist: \"artist\", url: \"url.mp3\", cover: \"cover.jpg\", }, ], }); });"},{"title":"tags","date":"2020-10-08T05:03:55.000Z","updated":"2020-10-08T06:42:58.608Z","comments":false,"path":"tags/index.html","permalink":"https://github.com/z-anshun/z-anshun.github.io/tree/master/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-10-08T05:07:02.000Z","updated":"2020-10-08T05:10:57.839Z","comments":false,"path":"categories/index.html","permalink":"https://github.com/z-anshun/z-anshun.github.io/tree/master/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2020-10-08T05:13:07.000Z","updated":"2020-10-08T06:46:16.747Z","comments":true,"path":"about/index.html","permalink":"https://github.com/z-anshun/z-anshun.github.io/tree/master/about/index.html","excerpt":"","text":"nothing"},{"title":"girls","date":"2020-10-08T05:13:07.000Z","updated":"2020-10-08T06:23:28.959Z","comments":true,"path":"girls/index.html","permalink":"https://github.com/z-anshun/z-anshun.github.io/tree/master/girls/index.html","excerpt":"","text":""},{"title":"links","date":"2020-10-08T05:13:07.000Z","updated":"2020-10-08T06:23:45.074Z","comments":true,"path":"links/index.html","permalink":"https://github.com/z-anshun/z-anshun.github.io/tree/master/links/index.html","excerpt":"","text":""},{"title":"四大皆空","date":"2020-10-08T05:49:37.973Z","updated":"2020-10-08T05:49:37.973Z","comments":true,"path":"/404.html","permalink":"https://github.com/z-anshun/z-anshun.github.io/tree/master/404.html","excerpt":"","text":""}],"posts":[{"title":"初步了解区块链与微服务","slug":"struct","date":"2020-10-19T13:53:49.000Z","updated":"2020-10-19T14:10:30.113Z","comments":true,"path":"2020/10/19/struct/","link":"","permalink":"https://github.com/z-anshun/z-anshun.github.io/tree/master/2020/10/19/struct/","excerpt":"","text":"因为对于个人而言，我经常搞混区块链和分布式，所以便狠下决心写了这篇文章 区块链 概念：从科技层面来看，区块链涉及数学、密码学、互联网和计算机编程等很多科学技术问题。从应用视角来看，简单来说，区块链是一个分布式的共享账本和数据库，具有去中心化、不可篡改、全程留痕、可以追溯、集体维护、公开透明等特点【摘自百度百科】 主要运用于金融、物联网和物流领域、公共服务领域等 1.要了解区块链，我们先来了解一个概念 去中心化去中心化 在一个分布有众多节点的系统中，每个节点都具有高度自治的特征。节点之间彼此可以自由连接，形成新的连接单元。任何一个节点都可能成为阶段性的中心，但不具备强制性的中心控制功能。节点与节点之间的影响，会通过网络而形成非线性因果关系。这种开放式、扁平化、平等性的系统现象或结构，我们称之为去中心化【摘自百度百科】 简单的来说，去中心化，就是不要中心，人人都可能成为中心的意思。（例如：Facebook，博客这类） 2.然后，为什么需要区块链这个东西呢？咱们以支付包转账举例： 这里，假设用户A购买了用户B的商品，支付宝便是第三方负责这个交易的。但，假设我们使用跑代码的方法进行入账和出账（这里补充一点，支付宝一开始人工处理这些交易的），怎么才能保证绝对的安全呢？很明显这点很难做到 这便是传统的中心化（所有的用户都以支付宝为中心）： 3.去中心化服务的区块链为了解决人工，安全等问题，支付宝便使用了区块链网络 用户各自为节点，各自为中心，每一个人都拥有各自的一个密钥，每个人都拥有着同一个账本，而不是由支付宝一个人账了。 这里可能又有人要问了，如果我修改了自己的拥有的那一份账本上自己的数据（假设你给自己账户+2 000 000），会造成什么影响呢？ 假设你修改了，但是其它51%的人的账户都还是显示的你是原来账户上的数据所以并不会改变（这也是传说中的比特币为什么那么难以攻破它市值的原因） （如果大家看过“硅谷“这个电视剧，有一个片段就是将的一个攻防战，讲的就是一个去中心化的服务，谁先占有51%的用户，就拥有网络的操作权） 分步式服务略微了解了区块链后，现在我们来了解下分布式服务框架（因为这两个对于刚开始了解的人很容易搞混） 概念：当计算机的程序和数据通过网络分布在多于一个的计算机上时，计算就成为“分布式的” 简单来说，就是一个硬件或软件组件分布在不同的网络计算机上，彼此之间仅仅通过消息传递进行通信和协调的系统，常见的消息传递就是通过HTTP的RESTful API进行传输 1.为什么要有分布式服务?首先，假设我们有个抢票系统的服务，并且这个使用的是单架构模式 若一个用户购票后，我们需要对数据库进行进行用户信息的处理和影票信息的处理 这里需要先了解：一个tomcat通常能够承载200~300并发（取决于硬件及网络等外界条件），一个mysql默认并发数100 所以，如果有大量用户同时购买，对数据库的压力就会很大，若其中用户信息溢出或影票信息的临时更新，都会导致整个服务不可用。 2.什么是分布式架构模式 概念：整个系统的功能单位分散到不同的进程,**然后够个进程共同提供不同的业务能力**,我们称之为”分布式架构”(Distributed Architecture) 光看概念肯定是难以理解，下面还是借用上面那个例子来举例 很明显两个数据库各储存各的，即是一个宕机了，也不会影响另一个。虽然我们看似分开处理比合并着处理好多了。但这也是有缺点的，一是数据库多了。维护成本自然大了，二则是对资源的要求也增加了。 3.微服务架构模式这里只做点了解，why？（因为我也不是很会） 首先先来了解什么是微服务 简单来说微服务就是很小的服务，小到一个服务只对应一个单一的功能，只做一件事。这个服务可以单独部署运行，服务之间可以通过RPC来相互交互，每个微服务都是由独立的小团队开发，测试，部署，上线，负责它的整个生命周期 那微服务架构又是啥？ 在做架构设计的时候，先做逻辑架构，再做物理架构，当你拿到需求后，估算过最大用户量和并发量后，计算单个应用服务器能否满足需求，如果用户量只有几百人的小应用，单体应用就能搞定，即所有应用部署在一个应用服务器里，如果是很大用户量，且某些功能会被频繁访问，或者某些功能计算量很大，建议将应用拆解为多个子系统，各自负责各自功能，这就是微服务架构。 分布式和微服务的区别： ​ 1.生产环境下的微服务肯定是分布式部署的，分布式部署的应用不一定是微服务架构的，比如集群部署，它是把相同应用复制到不同服务器上，但是逻辑功能上还是单体应用。 ​ 2.微服务架构模式很像分布式，但它的粒度更小，服务之间耦合度更低，由于每个微服务都由独立的小团队负责，因此它敏捷性更高，但维护起来也更麻烦 4.总结 单体架构 分布式架构 优点 1.易于开发 2.易于部署 3.易于扩展（后续可扩展多个副本） 1.吞吐量大 2.单个服务维护成本低 3.可靠性强（即是单个服务宕机了，其它服务也能正常运行） 缺点 1.可靠性差 2.维护成本高 3.吞吐量小 1.对技术要求高 2.人力成本大 3.资源要求大 总的来说区块链与分布式的联系并不是很大，但区块链使用了分布式架构的想法，实现去中心化，把每个用户都当作一个体，各自可为中心，而分布式则是面向的服务，把服务细分，各管各的。（更多关于区块链的可以去了解传说中的比特币） 参考链接：https://blog.csdn.net/weixin_45393094/article/details/104632343 https://zhuanlan.zhihu.com/p/22228902 https://blog.csdn.net/zhonglunsheng/article/details/83153451","categories":[{"name":"随笔","slug":"随笔","permalink":"https://github.com/z-anshun/z-anshun.github.io/tree/master/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"架构","slug":"架构","permalink":"https://github.com/z-anshun/z-anshun.github.io/tree/master/tags/%E6%9E%B6%E6%9E%84/"}]},{"title":"基本信息","slug":"competition","date":"2020-10-15T13:43:35.000Z","updated":"2020-10-15T13:52:04.016Z","comments":true,"path":"2020/10/15/competition/","link":"","permalink":"https://github.com/z-anshun/z-anshun.github.io/tree/master/2020/10/15/competition/","excerpt":"","text":"数据集1：base_info.csv 标签 类别 id 企业唯一标识 oplocdistrict 行政区划代码 industryphy 行业类别代码 industryco 行业细类代码 dom 经营地址 opscope 经营范围 enttype 企业类型 enttypeitem 企业类型小类 opfrom 经营期限起 opto 经营期限止 state 状态 orgid 机构标识 jobid 职位标识 adbusign 是否广告经营 townsign 是否城镇 regtype 主题登记类型 empnum 从业人数 compform 组织形式 parnum 合伙人数 exenum 执行人数 opform 经营方式 ptbusscope 兼营范围 venind 风险行业 enttypeminu 企业类型细类 midpreindcode 中西部优势产业代码 protype 项目类型 oploc 经营场所 regcap 注册资本（金） reccap 实缴资本 forreccap 实缴资本（外方） forregcap 注册资本（外方） congro 投资总额 enttypegb 企业（机构）类型 数据集2：annual_report_info.csv1234567891011121314151617181920212223id 企业唯一标识ANCHEYEAR 年度STATE 状态FUNDAM 资金数额MEMNUM 成员人数FARNUM 农民人数ANNNEWMEMNUM 本年度新增成员人数ANNREDMEMNUM 本年度退出成员人数EMPNUM 从业人数EMPNUMSIGN 从业人数是否公示BUSSTNAME 经营状态名称COLGRANUM 其中高校毕业生人数经营者RETSOLNUM 其中退役士兵人数经营者DISPERNUM 其中残疾人人数经营者UNENUM 其中下岗失业人数经营者COLEMPLNUM 其中高校毕业生人数雇员RETEMPLNUM 其中退役士兵人数雇员DISEMPLNUM 其中残疾人人数雇员UNEEMPLNUM 其中下岗失业人数雇员WEBSITSIGN 是否有网站标志FORINVESTSIGN 是否有对外投资企业标志STOCKTRANSIGN 有限责任公司本年度是否发生股东股权转让标志PUBSTATE 公示状态：1 全部公示，2部分公示,3全部不公示 数据集3：tax_info.csv123456789id 企业唯一标识START_DATE 起始时间END_DATE 终止时间TAX_CATEGORIES 税种TAX_ITEMS 税目TAXATION_BASIS 计税依据TAX_RATE 税率DEDUCTION 扣除数TAX_AMOUNT 税额 数据集4：change_info.csv12345id 企业唯一标识bgxmdm 变更信息代码bgq 变更前bgh 变更后bgrq 变更日期 数据集5：news_info.csv123id 企业唯一标识positive_negtive 新闻正负面性public_date 发布日期 数据集6：other_info.csv1234id 企业唯一标识 legal_judgment_num 裁判文书数量brand_num 注册商标数量patent_num 专利数量 数据集7：entprise_info.csv带标注的企业数据。每一行代表一个企业，每一行2列，其中id列为企业唯一标识，label列为标注（1：有非法集资风险，0：无非法集资风险），列之间采用“,”分隔符分割 数据集8（验证集）：entprise_evaluate.csv每一行代表一个企业，每一行有 2 列, 其中id列为企业唯一标识，score列为空，列之间采用“,”分隔符分割 如： id score 82750f1b9d1223508ee329d47e27d35176c93eb9f35e9c1a 0.0001 f000950527a6feb670cc1c87c2025f3922aaa4a0206a0a33 0.0002 e9f7b28ec10e04700ef4db75a494f9a1e8e8b09555e6afa1 0.0003 beb4aaaa89e0a0ae9d77bd5d7665be6342f552f51840cf19 0.0004 e9f7b28ec10e0470ee4172cec0133b6826c34f27d3dff204 0.0005 d8071a739aa75a3ba10ae8205ae3c7b267bdbe32cd6cb582 0.0006 f000950527a6feb63dcc53f7fc8ccac0eb92d37b34f18854 0.0007 4a8fc4f3fb4d8a0ff806928b39e9b5e776d9b0d2d32bce0a 0.0008 f000950527a6feb678e9430f14270a010ec5e747a694829a 0.0009 d8071a739aa75a3bb4ea6cf0f8ce3b13082101f40a426037 0.001 8f19388cfd6e2b9c1245cd2b699345995d8983b74a3e1f98 0.0011 da8691b210adb3f650c6cf12438085a7b6a3fa62e4806333 0.0012 da8691b210adb3f62d73891e5769ab06c8bfad96fa50778f 0.0013 f000950527a6feb6dc5fea352959ce7a91b1a31843cc2042 0.0014 f000950527a6feb655bd97953a1686480289fcb12ab193f0 0.0015 516ab81418ed215dbf53c2d4e3d8e4c41e3ded65e5488128 0.0016 beb4aaaa89e0a0ae25ca69a05a0a98b61b6904fba82af3c1 0.0017","categories":[{"name":"比赛","slug":"比赛","permalink":"https://github.com/z-anshun/z-anshun.github.io/tree/master/categories/%E6%AF%94%E8%B5%9B/"}],"tags":[{"name":"信息分析","slug":"信息分析","permalink":"https://github.com/z-anshun/z-anshun.github.io/tree/master/tags/%E4%BF%A1%E6%81%AF%E5%88%86%E6%9E%90/"}]},{"title":"浅谈进程与协程、异步与同步、并发与并行","slug":"infomal","date":"2020-10-14T13:35:35.000Z","updated":"2020-10-14T13:54:38.688Z","comments":true,"path":"2020/10/14/infomal/","link":"","permalink":"https://github.com/z-anshun/z-anshun.github.io/tree/master/2020/10/14/infomal/","excerpt":"","text":"今天偶然看到异步和同步的文章，联想到了进程，线程这些。下面，我来浅谈一下进程、线程、异步和同步 进程和线程进程 一个程序的执行过程，是一个Windows系统中的一个动态的概念，包含了一个线程或多个线程。 每一个进程的都有自己的空间地址，内存不共享 一个进程至少有5种基本状态，分别是：初始态，执行态，等待状态，就绪状态，终止状态。 线程 CPU调度的和分配的基本单位 它可与同属的一个进程的多个线程共享资源 这里补充一点，协程(gorutine)是依赖于线程来管理的，就对GO语言而说，因为我们能直接管理线程，便通过协程来调度，实现其百万并发 进程和线程的区别 进程 线程 基本单元 资源分配的基本单元 cpu调度的基本单元 关于资源 不能共享 同一进程的线程可共享 创建与切换的开销 大 小 同步(Sync)和异步(Async)同步概念：在执行一个事件的时候，没有得到返回结果前，就不会继续往下执行 换句话来说：就是按顺序一件一件事情的做，只能等前一件事情做完了才能往下继续 举个例子 有个人头铁，提交了作业后，非要等评分出了，才去干其它事情 异步概念：与同步相对，在执行一个事件的时候，即是没有得到返回结果，也可以继续往下执行。但这里要注意的是当调用完成后，一般是通过状态、通知和回调来通知调用者的，并且调用的返回不再受调用者控制（这里可以联系到js的回调函数，具体我就不说） 举个​例子:后来，这个人变聪明，提交作业后，就不管了，去干其它事情了 同步和异步的区别总的来说，同步和异步的区别就是在于是否需要等待结果的返回 并发和并行并发 概念：在操作系统中，是指一个时间段中有几个程序都处于已启动运行到运行完毕之间，且这几个程序都是在同一个处理机上运行，但任一个时刻点上只有一个程序在处理机上运行。 这里需要补充的是，当多个线程在一个cpu上运行的时候，实际上也不是同时运行的，cpu只是将时间划分成多个时间段，然后分配给各个线程。当一个线程在运行的时候，其它线程处于阻塞状态 还是举个例子：当你在吃饭的时候，电话打来了，你就去接电话了，接完了回来再继续吃饭 并行 概念：当系统有一个以上CPU时，则线程的操作有可能非并发。当一个CPU执行一个线程时，另一个CPU可以执行另一个线程，两个线程互不抢占CPU资源，可以同时进行，这种方式我们称之为并行(Parallel) 简而言之，就是同时进行，举个例子：你在吃饭，电话来了，然后你边吃饭边接电话 并发与并行的总结并发主要的是 排队、等待、执行。 并行则时同时执行。 参考连接： https://www.cnblogs.com/mhq-martin/p/9035640.html https://www.cnblogs.com/linguanh/p/11629828.html","categories":[{"name":"随笔","slug":"随笔","permalink":"https://github.com/z-anshun/z-anshun.github.io/tree/master/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"基础","slug":"基础","permalink":"https://github.com/z-anshun/z-anshun.github.io/tree/master/tags/%E5%9F%BA%E7%A1%80/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-10-04T05:43:12.009Z","updated":"2020-10-04T05:43:12.009Z","comments":true,"path":"2020/10/04/hello-world/","link":"","permalink":"https://github.com/z-anshun/z-anshun.github.io/tree/master/2020/10/04/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"随笔","slug":"随笔","permalink":"https://github.com/z-anshun/z-anshun.github.io/tree/master/categories/%E9%9A%8F%E7%AC%94/"},{"name":"比赛","slug":"比赛","permalink":"https://github.com/z-anshun/z-anshun.github.io/tree/master/categories/%E6%AF%94%E8%B5%9B/"}],"tags":[{"name":"架构","slug":"架构","permalink":"https://github.com/z-anshun/z-anshun.github.io/tree/master/tags/%E6%9E%B6%E6%9E%84/"},{"name":"信息分析","slug":"信息分析","permalink":"https://github.com/z-anshun/z-anshun.github.io/tree/master/tags/%E4%BF%A1%E6%81%AF%E5%88%86%E6%9E%90/"},{"name":"基础","slug":"基础","permalink":"https://github.com/z-anshun/z-anshun.github.io/tree/master/tags/%E5%9F%BA%E7%A1%80/"}]}