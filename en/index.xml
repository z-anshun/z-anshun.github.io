<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Noodles2hg的博客</title>
    <link>https://z-anshun.github.io/en/</link>
    <description>Recent content on Noodles2hg的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 29 Jun 2022 21:13:36 +0000</lastBuildDate>
    <atom:link href="https://z-anshun.github.io/en/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>大数据开发试题</title>
      <link>https://z-anshun.github.io/en/posts/blog/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E8%AF%95%E9%A2%98/</link>
      <pubDate>Wed, 29 Jun 2022 21:13:36 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/blog/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E8%AF%95%E9%A2%98/</guid>
      <description>基础概念 大数据带来思维方式的三个转变是 相关而非因果 全样而非抽样 效率而非精准 精准而非全面 大数据发展的三个阶段是 低谷期 萌芽期 成熟期 大规模应用期 每</description>
    </item>
    <item>
      <title>独立功能的实现</title>
      <link>https://z-anshun.github.io/en/posts/read/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/%E7%8B%AC%E7%AB%8B%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sat, 09 Apr 2022 20:24:12 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/read/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/%E7%8B%AC%E7%AB%8B%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>发布与订阅 Redis 的发布和订阅功能由 PUBLISH、SUBSCRIBE、PSUBSCRIBE 等命令组成 SUBSCRIBE 和 PSUBSCRIBE的区别在于，PSUB</description>
    </item>
    <item>
      <title>多机数据库</title>
      <link>https://z-anshun.github.io/en/posts/read/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/%E5%A4%9A%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Sat, 09 Apr 2022 01:22:12 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/read/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/%E5%A4%9A%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>复制 用户通过执行 SLAVEOF 命令或设置 slaveof 选项，会让一个服务器成为另一个服务器的从服务器 如： 1 127.0.0.1:12345&amp;gt; SLAVEOF 127.0.0.1 6379 127.0.0.1:12345 就会成为 127.0.0.1:6379 的从服务器 旧版复制功能的实现 Redis 的复制分</description>
    </item>
    <item>
      <title>单机数据库的实现</title>
      <link>https://z-anshun.github.io/en/posts/read/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 03 Apr 2022 23:26:22 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/read/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>数据库 服务器中的数据库 Redis 服务器将所有数据库都保存在服务器状态 redis.h/redisServer 结构的 db 数组中，db 数组的每一个项都是一个 redis.h/redisDb 结构 1 2 3 4 5 6 7 8 struct redisServer{ //... // 一个数</description>
    </item>
    <item>
      <title>底层结构</title>
      <link>https://z-anshun.github.io/en/posts/read/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/%E5%BA%95%E5%B1%82%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 28 Mar 2022 19:12:12 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/read/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/%E5%BA%95%E5%B1%82%E7%BB%93%E6%9E%84/</guid>
      <description>动态字符串 SDS（simple dynamic string），简单动态字符串 1 2 3 4 5 6 7 struct sdshdr{ int len; // 当前的长度 int free;// 可使用的空间 char buf[];// } 注意：SDS遵循C字符</description>
    </item>
    <item>
      <title>构造容器和镜像实现原理</title>
      <link>https://z-anshun.github.io/en/posts/read/%E6%89%8B%E6%90%93docker/%E6%9E%84%E9%80%A0%E5%AE%B9%E5%99%A8%E5%92%8C%E9%95%9C%E5%83%8F/</link>
      <pubDate>Sat, 26 Mar 2022 22:55:02 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/read/%E6%89%8B%E6%90%93docker/%E6%9E%84%E9%80%A0%E5%AE%B9%E5%99%A8%E5%92%8C%E9%95%9C%E5%83%8F/</guid>
      <description>构造实现 Linux proc 文件系统 首先，Linux 下的 /proc 文件系统 是由内核提供的，它并不是一个真正的文件系统，只包含了运行时的信息（如：系统内存、挂载信息、</description>
    </item>
    <item>
      <title>基础技术</title>
      <link>https://z-anshun.github.io/en/posts/read/%E6%89%8B%E6%90%93docker/%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Thu, 10 Mar 2022 18:12:37 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/read/%E6%89%8B%E6%90%93docker/%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF/</guid>
      <description>Docker 什么是docker？ 一个开源工具，将应用打包为镜像，并以容器方式运行 Docker 容器具有下面三个特点： 轻量级：共享内核，并且因为镜像以分层文件系统构</description>
    </item>
    <item>
      <title>grep</title>
      <link>https://z-anshun.github.io/en/posts/tech/linux/grep/</link>
      <pubDate>Sat, 05 Mar 2022 23:42:08 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/tech/linux/grep/</guid>
      <description></description>
    </item>
    <item>
      <title>find</title>
      <link>https://z-anshun.github.io/en/posts/tech/linux/find/</link>
      <pubDate>Thu, 03 Mar 2022 23:57:21 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/tech/linux/find/</guid>
      <description>find 在指定目录下查找文件 是findutil软件包的一部分，具有非常强大的灵活性，可以指定丰富的搜索条件（如文件权限、属主、属组、文件类型、日期</description>
    </item>
    <item>
      <title>xargs</title>
      <link>https://z-anshun.github.io/en/posts/tech/linux/xargs/</link>
      <pubDate>Wed, 02 Mar 2022 20:04:56 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/tech/linux/xargs/</guid>
      <description>Xargs 给其他命令传递参数的一个过滤器 擅长将标准输入数据转换成命令行格式 用法 读取输入数据重新格式化输出 1 2 3 4 5 6 7 cat test.txt a b c d e f g h i j k l m</description>
    </item>
    <item>
      <title>wc</title>
      <link>https://z-anshun.github.io/en/posts/tech/linux/wc/</link>
      <pubDate>Mon, 28 Feb 2022 22:27:02 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/tech/linux/wc/</guid>
      <description>wc 统计文件的字节数、字数、行数 若不指定其文件名，或给予的文件名为“-”，则wc会从标准输入设备读取数据 语法 1 2 3 wc(选项)(参数) wc [选项</description>
    </item>
    <item>
      <title>lsof</title>
      <link>https://z-anshun.github.io/en/posts/tech/linux/lsof/</link>
      <pubDate>Tue, 22 Feb 2022 19:42:58 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/tech/linux/lsof/</guid>
      <description>lsof list open file 一个查看进程打开的文件的工具 在Linux中，一切皆文件。因此，通过文件不仅可以访问常规数据，还能访问网络连接和硬件。所有lsof不仅</description>
    </item>
    <item>
      <title>sort</title>
      <link>https://z-anshun.github.io/en/posts/tech/linux/sort%E5%92%8Cuniq/</link>
      <pubDate>Mon, 21 Feb 2022 17:17:26 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/tech/linux/sort%E5%92%8Cuniq/</guid>
      <description>sort 对文本文件中所以进行排序，并将排序结果标准输出。 既可从指定文件输入，也可从 stdin 中获取输入 语法 1 sort [option]... [FILE]... 选项 -b：忽略开头的空白 -d：仅考虑空白</description>
    </item>
    <item>
      <title>SQL注入</title>
      <link>https://z-anshun.github.io/en/posts/blog/sql%E6%B3%A8%E5%85%A5/</link>
      <pubDate>Sun, 20 Feb 2022 14:36:41 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/blog/sql%E6%B3%A8%E5%85%A5/</guid>
      <description>什么是SQL注入 SQL注入攻击（SQL Injection），简称注入攻击，是Web开发中最常见的一种安全漏洞 有什么危害？ 可以用它来从数据库获</description>
    </item>
    <item>
      <title>部分排序</title>
      <link>https://z-anshun.github.io/en/posts/blog/%E9%83%A8%E5%88%86%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 13 Feb 2022 20:01:55 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/blog/%E9%83%A8%E5%88%86%E6%8E%92%E5%BA%8F/</guid>
      <description>题目： 面试题 16.16. 部分排序 给定一个整数数组，编写一个函数，找出索引m和n，只要将索引区间[m,n]的元素排好序，整个数组就是有序的。注意：n-m</description>
    </item>
    <item>
      <title>拥塞控制协议</title>
      <link>https://z-anshun.github.io/en/posts/blog/%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Mon, 07 Feb 2022 20:43:46 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/blog/%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE/</guid>
      <description>流量控制 什么是流量控制？目的？ 发送者发送的数据过快，接受者来不及接受，那么就会有分组丢失的情况。为了避免这种情况，我们就需要控制发送者的速度</description>
    </item>
    <item>
      <title>二叉树转双向链表</title>
      <link>https://z-anshun.github.io/en/posts/blog/%E4%BA%8C%E5%8F%89%E6%A0%91%E8%BD%AC%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Sun, 06 Feb 2022 18:52:02 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/blog/%E4%BA%8C%E5%8F%89%E6%A0%91%E8%BD%AC%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/</guid>
      <description>剑指 Offer 36. 二叉搜索树与双向链表 输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的循环双向链表。要求不能创建任何新的节点，只能调整树中节点指针的</description>
    </item>
    <item>
      <title>乘积小于K的子数组</title>
      <link>https://z-anshun.github.io/en/posts/blog/%E4%B9%98%E7%A7%AF%E5%B0%8F%E4%BA%8Ek%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</link>
      <pubDate>Wed, 02 Feb 2022 17:56:45 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/blog/%E4%B9%98%E7%A7%AF%E5%B0%8F%E4%BA%8Ek%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</guid>
      <description>剑指 Offer II 009. 乘积小于 K 的子数组 给定一个正整数数组 nums和整数 k ，请找出该数组内乘积小于 k 的连续的子数组的个数。 示例 1: 1 2 3 4 输入: nums = [10,5,2,6], k =</description>
    </item>
    <item>
      <title>缓存穿透、雪崩、击穿</title>
      <link>https://z-anshun.github.io/en/posts/blog/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E9%9B%AA%E5%B4%A9%E5%87%BB%E7%A9%BF/</link>
      <pubDate>Tue, 01 Feb 2022 20:45:37 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/blog/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E9%9B%AA%E5%B4%A9%E5%87%BB%E7%A9%BF/</guid>
      <description>缓存穿透 指查询一个不存在的数据，那么肯定缓存里没有，就会查找DB，如果DB也没有，那么就不会写入缓存，这就是会导致每次对该数据查询的时候都要</description>
    </item>
    <item>
      <title>最长的美好子字符串</title>
      <link>https://z-anshun.github.io/en/posts/blog/%E6%9C%80%E9%95%BF%E7%9A%84%E7%BE%8E%E5%A5%BD%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Tue, 01 Feb 2022 20:00:01 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/blog/%E6%9C%80%E9%95%BF%E7%9A%84%E7%BE%8E%E5%A5%BD%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>最长美好子字符串 1763. 最长的美好子字符串 当一个字符串 s 包含的每一种字母的大写和小写形式 同时 出现在 s 中，就称这个字符串 s 是 美好 字符串。比方说，&amp;q</description>
    </item>
    <item>
      <title>跳跃游戏</title>
      <link>https://z-anshun.github.io/en/posts/blog/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/</link>
      <pubDate>Sat, 22 Jan 2022 22:53:29 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/blog/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/</guid>
      <description>题目： 1345. 跳跃游戏 IV 给你一个整数数组 arr ，你一开始在数组的第一个元素处（下标为 0）。 每一步，你可以从下标 i 跳到下标： i + 1 满足：i + 1 &amp;lt; arr.length i - 1</description>
    </item>
    <item>
      <title>最长重复子数组</title>
      <link>https://z-anshun.github.io/en/posts/blog/%E6%9C%80%E9%95%BF%E9%87%8D%E5%A4%8D%E5%AD%90%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sat, 22 Jan 2022 22:29:51 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/blog/%E6%9C%80%E9%95%BF%E9%87%8D%E5%A4%8D%E5%AD%90%E6%95%B0%E7%BB%84/</guid>
      <description>题目：718. 最长重复子数组 给两个整数数组 A 和 B ，返回两个数组中公共的、长度最长的子数组的长度。 示例： 1 2 3 4 5 6 输入： A: [1,2,3,2,1] B: [3,2,1,4,7] 输出：3 解释</description>
    </item>
    <item>
      <title>最大公约数</title>
      <link>https://z-anshun.github.io/en/posts/blog/gcb/</link>
      <pubDate>Mon, 13 Dec 2021 15:48:17 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/blog/gcb/</guid>
      <description>最大公约数即为 Greatest Common Divisor，常缩写为 gcd 欧几里得算法 $$ 若x=cn,y=cm，c为最大公约数\ 那么当x&amp;gt;y时，即n&amp;gt;m时\ 令x</description>
    </item>
    <item>
      <title>和至少为 K 的最短子数组</title>
      <link>https://z-anshun.github.io/en/posts/blog/%E5%92%8C%E8%87%B3%E5%B0%91%E4%B8%BA-k-%E7%9A%84%E6%9C%80%E7%9F%AD%E5%AD%90%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sun, 12 Dec 2021 15:45:32 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/blog/%E5%92%8C%E8%87%B3%E5%B0%91%E4%B8%BA-k-%E7%9A%84%E6%9C%80%E7%9F%AD%E5%AD%90%E6%95%B0%E7%BB%84/</guid>
      <description>题目：给你一个整数数组 nums 和一个整数 k ，找出 nums 中和至少为 k 的 最短非空子数组 ，并返回该子数组的长度。如果不存在这样的 子数组 ，返回 -1 。 子数组 是数组</description>
    </item>
    <item>
      <title>sync.Map原理</title>
      <link>https://z-anshun.github.io/en/posts/tech/golang/sync.map%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 06 Dec 2021 12:03:53 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/tech/golang/sync.map%E5%8E%9F%E7%90%86/</guid>
      <description>数据结构 Map 1 2 3 4 5 6 7 8 9 10 type Map struct{ // 加锁保护，用于dirty字段 mu Mutex // 只读数据，实际类型为readOnly，为原子操作 read atomic.Value // 原子操作实现的</description>
    </item>
    <item>
      <title>树状数组</title>
      <link>https://z-anshun.github.io/en/posts/blog/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</link>
      <pubDate>Thu, 21 Oct 2021 22:24:17 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/blog/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</guid>
      <description>简介 线状数组类是线段树，但是却又不同，其对于节点的更改，和查找集合是十分方便的 原理 假设，我们当前的数组为a，构成的线状数组为c 那么 即： c[1]=a[1] c[2]=a[1]+a[2] c[3]=a[3]</description>
    </item>
    <item>
      <title>最多牌组数</title>
      <link>https://z-anshun.github.io/en/posts/blog/%E6%9C%80%E5%A4%9A%E7%89%8C%E7%BB%84%E6%95%B0/</link>
      <pubDate>Sat, 09 Oct 2021 18:13:45 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/blog/%E6%9C%80%E5%A4%9A%E7%89%8C%E7%BB%84%E6%95%B0/</guid>
      <description>题目：麻将的游戏规则中，共有两种方式凑成「一组牌」： 顺子：三张牌面数字连续的麻将，例如 [4,5,6] 刻子：三张牌面数字相同的麻将，例如 [10,10,10] 给定若干数字作为</description>
    </item>
    <item>
      <title>最低加油次数</title>
      <link>https://z-anshun.github.io/en/posts/blog/%E6%9C%80%E4%BD%8E%E5%8A%A0%E6%B2%B9%E6%AC%A1%E6%95%B0/</link>
      <pubDate>Sat, 09 Oct 2021 18:12:46 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/blog/%E6%9C%80%E4%BD%8E%E5%8A%A0%E6%B2%B9%E6%AC%A1%E6%95%B0/</guid>
      <description>题目：汽车从起点出发驶向目的地，该目的地位于出发位置东面 target 英里处。 沿途有加油站，每个 station[i] 代表一个加油站，它位于出发位置东面 station[i][0] 英里处，并且有 station[i][1] 升</description>
    </item>
    <item>
      <title>劲爆金曲</title>
      <link>https://z-anshun.github.io/en/posts/blog/%E5%8A%B2%E7%88%86%E9%87%91%E6%9B%B2/</link>
      <pubDate>Fri, 01 Oct 2021 18:21:43 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/blog/%E5%8A%B2%E7%88%86%E9%87%91%E6%9B%B2/</guid>
      <description>剩下n首歌，t秒时间，问最多能唱几首的前提下，最长时间 输出最多歌数和最长时间 思路： 典型的动归问题，假设我们现在要唱j秒，然后当我们新加入一首</description>
    </item>
    <item>
      <title>并查集</title>
      <link>https://z-anshun.github.io/en/posts/blog/%E5%B9%B6%E6%9F%A5%E9%9B%86/</link>
      <pubDate>Thu, 30 Sep 2021 23:08:29 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/blog/%E5%B9%B6%E6%9F%A5%E9%9B%86/</guid>
      <description>对于一组数据，当要求我们检查某两个数据是否在同一集合内时，就需要并查集去实现了 如：&amp;lt;a,b&amp;gt;,&amp;lt;b,c&amp;gt;，那么很明显</description>
    </item>
    <item>
      <title>Manacher</title>
      <link>https://z-anshun.github.io/en/posts/blog/manacher/</link>
      <pubDate>Mon, 27 Sep 2021 22:56:33 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/blog/manacher/</guid>
      <description>题目：给定一段字符串，求该其最长的回文子串 主要思路： 我们创建一个将目标字符穿进行扩充，然后使用#进行填充，并在前后分别添加^和$方便后续操作</description>
    </item>
    <item>
      <title>关于Golang的指针传递</title>
      <link>https://z-anshun.github.io/en/posts/tech/golang/golangcall/</link>
      <pubDate>Mon, 20 Sep 2021 11:27:53 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/tech/golang/golangcall/</guid>
      <description>首先，我们先来看一段代码 1 2 3 4 5 6 7 8 9 10 11 12 13 package main import &amp;#34;fmt&amp;#34; func main(){ var i []int try(i) fmt.Println(i) //[] } func try(i []int){ i = append(i, 1) } 在这里，理论上来说本应该打印[1]，因为切片为一</description>
    </item>
    <item>
      <title>JAVA学习第六天</title>
      <link>https://z-anshun.github.io/en/posts/tech/java/day06/</link>
      <pubDate>Tue, 02 Mar 2021 21:16:00 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/tech/java/day06/</guid>
      <description>包及访问控制权限 打包 语法 1 package 包名 编译语法 javac -d . PackageDemo01.java -d:表示生成目录，目录以package的定义为准 .：表示在当前所在的文件夹下生成 导入 import 语法</description>
    </item>
    <item>
      <title>JAVA学习第五天</title>
      <link>https://z-anshun.github.io/en/posts/tech/java/day05/</link>
      <pubDate>Tue, 02 Mar 2021 21:15:56 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/tech/java/day05/</guid>
      <description>异常 try-catch 类似于if-else 语法： 1 2 3 4 5 6 7 8 9 10 11 12 13 try{ // 可能有错误的语句 }catch(异常类 异常对象){ // 对应的处理语句 }catch(</description>
    </item>
    <item>
      <title>JAVA学习第四天</title>
      <link>https://z-anshun.github.io/en/posts/tech/java/day04/</link>
      <pubDate>Tue, 09 Feb 2021 20:52:11 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/tech/java/day04/</guid>
      <description>适配器的设计 为什么需要这个? 我们先假设一下，如果一个接口定义了许多抽象方法，那么即便我们需要实现这个接口，也不一定需要其中的全部方法，就会造</description>
    </item>
    <item>
      <title>JAVA学习第三天</title>
      <link>https://z-anshun.github.io/en/posts/tech/java/day03/</link>
      <pubDate>Mon, 08 Feb 2021 00:22:12 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/tech/java/day03/</guid>
      <description>面向对象（高级） 继承 语法： 1 2 3 class 子类 extends 父类{ } 例： 1 2 3 4 5 class Student extends Person{ public Student(){ super(); // 调用父级的构造函数，当构造函数的参数为空时可省略 } } 换句话说，</description>
    </item>
    <item>
      <title>JAVA学习第二天</title>
      <link>https://z-anshun.github.io/en/posts/tech/java/day02/</link>
      <pubDate>Fri, 05 Feb 2021 23:31:47 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/tech/java/day02/</guid>
      <description>面向对象 面向对象具有的特征 封装性：即将其对象封装起来，并且实现“信息隐蔽”。也就是说只需要外界知道怎么使用，也不需要了解其细节，个别属性外界</description>
    </item>
    <item>
      <title>JAVA学习第一天</title>
      <link>https://z-anshun.github.io/en/posts/tech/java/day01/</link>
      <pubDate>Thu, 04 Feb 2021 22:28:28 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/tech/java/day01/</guid>
      <description>梦开始的地方 1 2 3 4 5 public class main { public static void main(String[] args){ System.out.println(&amp;#34;hello world&amp;#34;); } } 前言 Java的简介 java具有三个发展方向，分别是 JAVA SE: JAVA的核心语言类，也是我要学的，主</description>
    </item>
    <item>
      <title>XSS攻击和CSRF攻击</title>
      <link>https://z-anshun.github.io/en/posts/blog/xss/</link>
      <pubDate>Sun, 25 Oct 2020 12:40:21 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/blog/xss/</guid>
      <description>XSS攻击 “XSS是跨站脚本攻击(Cross Site Scripting)，为不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本</description>
    </item>
    <item>
      <title>初步了解区块链与微服务</title>
      <link>https://z-anshun.github.io/en/posts/blog/struct/</link>
      <pubDate>Mon, 19 Oct 2020 21:53:49 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/blog/struct/</guid>
      <description>因为对于个人而言，我经常搞混区块链和分布式，所以便狠下决心写了这篇文章 区块链 概念：从科技层面来看，区块链涉及数学、密码学、互联网和计算机编程</description>
    </item>
    <item>
      <title>浅谈进程与协程、异步与同步、并发与并行</title>
      <link>https://z-anshun.github.io/en/posts/blog/infomal/</link>
      <pubDate>Wed, 14 Oct 2020 21:35:35 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/blog/infomal/</guid>
      <description>今天偶然看到异步和同步的文章，联想到了进程，线程这些。下面，我来浅谈一下进程、线程、异步和同步 进程和线程 进程 一个程序的执行过程，是一个Win</description>
    </item>
    <item>
      <title>links</title>
      <link>https://z-anshun.github.io/en/links/</link>
      <pubDate>Thu, 08 Oct 2020 13:13:07 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/links/</guid>
      <description></description>
    </item>
    <item>
      <title>Noodles2hg</title>
      <link>https://z-anshun.github.io/en/about/</link>
      <pubDate>Thu, 08 Oct 2020 13:13:07 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/about/</guid>
      <description>nothing</description>
    </item>
    <item>
      <title>CA证书</title>
      <link>https://z-anshun.github.io/en/posts/blog/ca%E8%AF%81%E4%B9%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/blog/ca%E8%AF%81%E4%B9%A6/</guid>
      <description>认证中心CA Certificate Authority，证书认证中心 流程： 服务端S会向第三方CA提交公钥（记住不是私钥，私钥自己留着）、组织信息、个人信息（域名）</description>
    </item>
    <item>
      <title>Hello World</title>
      <link>https://z-anshun.github.io/en/posts/blog/hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/blog/hello-world/</guid>
      <description>Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.
Quick Start Create a new post 1 $ hexo new &amp;#34;My New Post&amp;#34; More info: Writing
Run server 1 $ hexo server More info: Server
Generate static files 1 $ hexo generate More info: Generating</description>
    </item>
    <item>
      <title>四大皆空</title>
      <link>https://z-anshun.github.io/en/404/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/404/</guid>
      <description></description>
    </item>
  </channel>
</rss>
