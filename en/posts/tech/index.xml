<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>👨🏻‍💻技术 on Noodles2hg的博客</title>
    <link>https://z-anshun.github.io/en/posts/tech/</link>
    <description>Recent content in 👨🏻‍💻技术 on Noodles2hg的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 05 Mar 2022 23:42:08 +0000</lastBuildDate>
    <atom:link href="https://z-anshun.github.io/en/posts/tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>grep</title>
      <link>https://z-anshun.github.io/en/posts/tech/linux/grep/</link>
      <pubDate>Sat, 05 Mar 2022 23:42:08 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/tech/linux/grep/</guid>
      <description></description>
    </item>
    <item>
      <title>find</title>
      <link>https://z-anshun.github.io/en/posts/tech/linux/find/</link>
      <pubDate>Thu, 03 Mar 2022 23:57:21 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/tech/linux/find/</guid>
      <description>find 在指定目录下查找文件 是findutil软件包的一部分，具有非常强大的灵活性，可以指定丰富的搜索条件（如文件权限、属主、属组、文件类型、日期</description>
    </item>
    <item>
      <title>xargs</title>
      <link>https://z-anshun.github.io/en/posts/tech/linux/xargs/</link>
      <pubDate>Wed, 02 Mar 2022 20:04:56 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/tech/linux/xargs/</guid>
      <description>Xargs 给其他命令传递参数的一个过滤器 擅长将标准输入数据转换成命令行格式 用法 读取输入数据重新格式化输出 1 2 3 4 5 6 7 cat test.txt a b c d e f g h i j k l m</description>
    </item>
    <item>
      <title>wc</title>
      <link>https://z-anshun.github.io/en/posts/tech/linux/wc/</link>
      <pubDate>Mon, 28 Feb 2022 22:27:02 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/tech/linux/wc/</guid>
      <description>wc 统计文件的字节数、字数、行数 若不指定其文件名，或给予的文件名为“-”，则wc会从标准输入设备读取数据 语法 1 2 3 wc(选项)(参数) wc [选项</description>
    </item>
    <item>
      <title>lsof</title>
      <link>https://z-anshun.github.io/en/posts/tech/linux/lsof/</link>
      <pubDate>Tue, 22 Feb 2022 19:42:58 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/tech/linux/lsof/</guid>
      <description>lsof list open file 一个查看进程打开的文件的工具 在Linux中，一切皆文件。因此，通过文件不仅可以访问常规数据，还能访问网络连接和硬件。所有lsof不仅</description>
    </item>
    <item>
      <title>sort</title>
      <link>https://z-anshun.github.io/en/posts/tech/linux/sort%E5%92%8Cuniq/</link>
      <pubDate>Mon, 21 Feb 2022 17:17:26 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/tech/linux/sort%E5%92%8Cuniq/</guid>
      <description>sort 对文本文件中所以进行排序，并将排序结果标准输出。 既可从指定文件输入，也可从 stdin 中获取输入 语法 1 sort [option]... [FILE]... 选项 -b：忽略开头的空白 -d：仅考虑空白</description>
    </item>
    <item>
      <title>sync.Map原理</title>
      <link>https://z-anshun.github.io/en/posts/tech/golang/sync.map%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 06 Dec 2021 12:03:53 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/tech/golang/sync.map%E5%8E%9F%E7%90%86/</guid>
      <description>数据结构 Map 1 2 3 4 5 6 7 8 9 10 type Map struct{ // 加锁保护，用于dirty字段 mu Mutex // 只读数据，实际类型为readOnly，为原子操作 read atomic.Value // 原子操作实现的</description>
    </item>
    <item>
      <title>关于Golang的指针传递</title>
      <link>https://z-anshun.github.io/en/posts/tech/golang/golangcall/</link>
      <pubDate>Mon, 20 Sep 2021 11:27:53 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/tech/golang/golangcall/</guid>
      <description>首先，我们先来看一段代码 1 2 3 4 5 6 7 8 9 10 11 12 13 package main import &amp;#34;fmt&amp;#34; func main(){ var i []int try(i) fmt.Println(i) //[] } func try(i []int){ i = append(i, 1) } 在这里，理论上来说本应该打印[1]，因为切片为一</description>
    </item>
    <item>
      <title>JAVA学习第六天</title>
      <link>https://z-anshun.github.io/en/posts/tech/java/day06/</link>
      <pubDate>Tue, 02 Mar 2021 21:16:00 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/tech/java/day06/</guid>
      <description>包及访问控制权限 打包 语法 1 package 包名 编译语法 javac -d . PackageDemo01.java -d:表示生成目录，目录以package的定义为准 .：表示在当前所在的文件夹下生成 导入 import 语法</description>
    </item>
    <item>
      <title>JAVA学习第五天</title>
      <link>https://z-anshun.github.io/en/posts/tech/java/day05/</link>
      <pubDate>Tue, 02 Mar 2021 21:15:56 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/tech/java/day05/</guid>
      <description>异常 try-catch 类似于if-else 语法： 1 2 3 4 5 6 7 8 9 10 11 12 13 try{ // 可能有错误的语句 }catch(异常类 异常对象){ // 对应的处理语句 }catch(</description>
    </item>
    <item>
      <title>JAVA学习第四天</title>
      <link>https://z-anshun.github.io/en/posts/tech/java/day04/</link>
      <pubDate>Tue, 09 Feb 2021 20:52:11 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/tech/java/day04/</guid>
      <description>适配器的设计 为什么需要这个? 我们先假设一下，如果一个接口定义了许多抽象方法，那么即便我们需要实现这个接口，也不一定需要其中的全部方法，就会造</description>
    </item>
    <item>
      <title>JAVA学习第三天</title>
      <link>https://z-anshun.github.io/en/posts/tech/java/day03/</link>
      <pubDate>Mon, 08 Feb 2021 00:22:12 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/tech/java/day03/</guid>
      <description>面向对象（高级） 继承 语法： 1 2 3 class 子类 extends 父类{ } 例： 1 2 3 4 5 class Student extends Person{ public Student(){ super(); // 调用父级的构造函数，当构造函数的参数为空时可省略 } } 换句话说，</description>
    </item>
    <item>
      <title>JAVA学习第二天</title>
      <link>https://z-anshun.github.io/en/posts/tech/java/day02/</link>
      <pubDate>Fri, 05 Feb 2021 23:31:47 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/tech/java/day02/</guid>
      <description>面向对象 面向对象具有的特征 封装性：即将其对象封装起来，并且实现“信息隐蔽”。也就是说只需要外界知道怎么使用，也不需要了解其细节，个别属性外界</description>
    </item>
    <item>
      <title>JAVA学习第一天</title>
      <link>https://z-anshun.github.io/en/posts/tech/java/day01/</link>
      <pubDate>Thu, 04 Feb 2021 22:28:28 +0000</pubDate>
      <guid>https://z-anshun.github.io/en/posts/tech/java/day01/</guid>
      <description>梦开始的地方 1 2 3 4 5 public class main { public static void main(String[] args){ System.out.println(&amp;#34;hello world&amp;#34;); } } 前言 Java的简介 java具有三个发展方向，分别是 JAVA SE: JAVA的核心语言类，也是我要学的，主</description>
    </item>
  </channel>
</rss>
